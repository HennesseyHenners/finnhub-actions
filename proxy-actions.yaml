openapi: 3.1.0
info:
  title: Weekly Rotator Finnhub Proxy
  version: 1.7.0
  description: Proxy that injects the Finnhub and TAAPI secrets server-side; provides ATR via TAAPI with resilient Yahoo fallbacks, generic TAAPI indicator proxy, and volume spike helpers.
servers:
  - url: https://weekly-rotator-proxy.henryrajones.workers.dev
jsonSchemaDialect: https://json-schema.org/draft/2020-12/schema

paths:
  /quote:
    get:
      operationId: getQuote
      summary: Get real-time quote (proxied)
      parameters:
        - name: symbol
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Quote data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

  /stock/candle:
    get:
      operationId: getCandles
      summary: Historical daily OHLCV (proxied)
      parameters:
        - name: symbol
          in: query
          required: true
          schema: { type: string }
        - name: resolution
          in: query
          required: true
          schema:
            type: string
            enum: [D]
        - name: from
          in: query
          required: true
          schema:
            type: integer
            description: Unix timestamp (UTC seconds)
        - name: to
          in: query
          required: true
          schema:
            type: integer
            description: Unix timestamp (UTC seconds)
      responses:
        '200':
          description: Candles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candles'

  /company-news:
    get:
      operationId: getRecentNews
      summary: Company news last 24-48h (proxied)
      parameters:
        - name: symbol
          in: query
          required: true
          schema: { type: string }
        - name: from
          in: query
          required: true
          schema: { type: string, format: date }
        - name: to
          in: query
          required: true
          schema: { type: string, format: date }
      responses:
        '200':
          description: News list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsItem'

  /calendar/earnings:
    get:
      operationId: getEarningsCalendar
      summary: Earnings calendar (proxied)
      parameters:
        - name: from
          in: query
          required: true
          schema: { type: string, format: date }
        - name: to
          in: query
          required: true
          schema: { type: string, format: date }
        - name: symbol
          in: query
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Earnings list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarningsResponse'

  /stock/metric:
    get:
      operationId: getStockMetrics
      summary: Fundamentals (proxied)
      parameters:
        - name: symbol
          in: query
          required: true
          schema: { type: string }
        - name: metric
          in: query
          required: false
          schema: { type: string, default: all }
      responses:
        '200':
          description: Metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'

  /taapi/atr:
    get:
      operationId: getAtrTaapi
      summary: ATR via TAAPI (proxied; auto-fallback to Yahoo on error).
      description: >
        Supports both stocks and crypto. Use `symbol` for a single instrument,
        or `symbols` (comma-separated, max 3) for batch. For stocks, the proxy
        sets `type=stocks` automatically. For crypto, specify `exchange`
        (defaults to binance). Returns either a single object or an array.
      parameters:
        - name: symbol
          in: query
          required: false
          schema: { type: string }
          description: Single symbol (e.g., AAPL or BTC/USDT). Use this OR `symbols`.
        - name: symbols
          in: query
          required: false
          schema: { type: string }
          description: Comma-separated symbols (max 3), e.g., "AAPL,MSFT,NVDA". Use this OR `symbol`.
        - name: interval
          in: query
          required: false
          schema: { type: string, default: 1d }
        - name: period
          in: query
          required: false
          schema: { type: integer, default: 14 }
        - name: type
          in: query
          required: false
          schema: { type: string, enum: [stocks, crypto] }
          description: Force asset type. Usually not required—stocks are auto-detected, crypto uses `/` in symbol.
        - name: exchange
          in: query
          required: false
          schema: { type: string }
          description: Only for crypto. Defaults to binance.
      responses:
        '200':
          description: ATR response for one symbol (object) or multiple (array of objects)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AtrResponse'
                  - type: array
                    items:
                      $ref: '#/components/schemas/AtrResponse'

  /taapi/indicator:
    get:
      operationId: getTaapiIndicator
      summary: Generic TAAPI indicator proxy (multi-indicator, multi-symbol)
      description: >
        Fetch RSI, MACD, ADX, Supertrend, MFI, BBANDS/BBW/Keltner and more via a single route.
        - Auto-sets `type=stocks` for equities; for crypto, pass an `exchange` (defaults to binance).
        - Use `symbol` or `symbols` (comma-separated, max 3).
        - Pass TAAPI params like `period`, `results`, `backtrack`, `addResultTimestamp` as needed.
        - Returns TAAPI's raw structure with an added top-level `symbol` per item.
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            enum: [rsi, macd, adx, supertrend, mfi, bbands, bbw, keltner]
        - name: symbol
          in: query
          required: false
          schema: { type: string }
          description: Single symbol (e.g., AAPL or BTC/USDT). Use this OR `symbols`.
        - name: symbols
          in: query
          required: false
          schema: { type: string }
          description: Comma-separated symbols (max 3), e.g., "AAPL,MSFT,NVDA". Use this OR `symbol`.
        - name: interval
          in: query
          required: false
          schema: { type: string, default: 1d }
        - name: period
          in: query
          required: false
          schema: { type: integer }
        - name: type
          in: query
          required: false
          schema: { type: string, enum: [stocks, crypto] }
          description: Force asset type. Usually not required—stocks are auto-detected, crypto uses `/` in symbol.
        - name: exchange
          in: query
          required: false
          schema: { type: string }
          description: Only for crypto. Defaults to binance.
        - name: results
          in: query
          required: false
          schema: { type: integer }
          description: Number of results TAAPI should return (array output).
        - name: backtrack
          in: query
          required: false
          schema: { type: integer }
          description: Backtrack candles (TAAPI feature).
        - name: addResultTimestamp
          in: query
          required: false
          schema: { type: string, enum: ['true','false'] }
          description: Return timestamps for each result (TAAPI feature).
      responses:
        '200':
          description: Indicator response for one symbol (object/array) or multiple (array of mixed objects/arrays)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IndicatorPassThrough'
                  - type: array
                    items:
                      $ref: '#/components/schemas/IndicatorPassThrough'

  /atr:
    get:
      operationId: getAtrFromYahoo
      summary: ATR computed from Yahoo Finance candles (direct fallback)
      parameters:
        - name: symbol
          in: query
          required: true
          schema: { type: string }
        - name: period
          in: query
          required: false
          schema: { type: integer, default: 14 }
      responses:
        '200':
          description: ATR response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AtrResponse'

  /yahoo/volume:
    get:
      operationId: getYahooVolume
      summary: Latest daily volume from Yahoo Finance (fallback when quote.v is missing)
      parameters:
        - name: symbol
          in: query
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Latest volume snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeResponse'

  /volume/spike:
    get:
      operationId: getVolumeSpike
      summary: Compute live volume spike vs. AvgVol(3m), using Finnhub first and Yahoo as fallback
      parameters:
        - name: symbol
          in: query
          required: true
          schema: { type: string }
        - name: avgVol3m
          in: query
          required: true
          schema: { type: number }
          description: 3-month average volume from your Stage-1 screener
        - name: prefer
          in: query
          required: false
          schema: { type: string, enum: [auto, finnhub, yahoo], default: auto }
          description: Source preference. auto = Finnhub then Yahoo (default).
      responses:
        '200':
          description: Live volume spike calculation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeSpikeResponse'

  /volume/spike/normalized:
    get:
      operationId: getVolumeSpikeNormalized
      summary: Time-normalized live volume spike vs. AvgVol(3m) using US market session (09:30–16:00 America/New_York)
      parameters:
        - name: symbol
          in: query
          required: true
          schema: { type: string }
        - name: avgVol3m
          in: query
          required: true
          schema: { type: number }
          description: 3-month average volume from your Stage-1 screener
        - name: prefer
          in: query
          required: false
          schema: { type: string, enum: [auto, finnhub, yahoo], default: auto }
          description: Source preference. auto = Finnhub then Yahoo (default).
      responses:
        '200':
          description: Time-normalized volume spike calculation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NormalizedVolumeSpikeResponse'

components:
  schemas:
    Quote:
      type: object
      properties:
        c: { type: number, description: Current price }
        pc: { type: number, description: Previous close }
        h: { type: number, description: High }
        l: { type: number, description: Low }
        o: { type: number, description: Open }
        v: { type: number, description: Volume (may be omitted on free plans) }
        t: { type: integer, description: Timestamp (seconds) }

    Candles:
      type: object
      properties:
        c: { type: array, items: { type: number } }
        h: { type: array, items: { type: number } }
        l: { type: array, items: { type: number } }
        o: { type: array, items: { type: number } }
        v: { type: array, items: { type: number } }
        t: { type: array, items: { type: integer } }
        s: { type: string, description: Status }

    NewsItem:
      type: object
      properties:
        datetime: { type: integer }
        headline: { type: string }
        summary: { type: string }
        source: { type: string }
        url: { type: string }

    EarningsResponse:
      type: object
      properties:
        earningsCalendar:
          type: array
          items:
            $ref: '#/components/schemas/EarningsItem'

    EarningsItem:
      type: object
      properties:
        symbol: { type: string }
        date: { type: string, format: date }
        hour: { type: string }
        epsEstimate: { type: number }
        revenueEstimate: { type: number }

    MetricsResponse:
      type: object
      properties:
        metric:
          type: object
          additionalProperties: true

    AtrResponse:
      type: object
      properties:
        value: { type: number }
        source: { type: string }
        period: { type: integer }
        lastClose: { type: number }
        atrPct: { type: number }
        symbol: { type: string, description: Present when using multi-symbol calls }

    # Pass-through schema: TAAPI may return an object or an array of objects.
    IndicatorPassThrough:
      oneOf:
        - type: object
          additionalProperties: true
          properties:
            symbol: { type: string }
        - type: array
          items:
            type: object
            additionalProperties: true

    VolumeResponse:
      type: object
      properties:
        volume: { type: number }
        lastClose: { type: number }
        source: { type: string }

    VolumeSpikeResponse:
      type: object
      properties:
        symbol: { type: string }
        liveVolume: { type: number }
        avgVol3m: { type: number }
        spike: { type: number, description: liveVolume / avgVol3m }
        source: { type: string, description: "finnhub or yahoo" }

    NormalizedVolumeSpikeResponse:
      type: object
      properties:
        symbol: { type: string }
        liveVolume: { type: number }
        avgVol3m: { type: number }
        rawSpike: { type: number, description: liveVolume / avgVol3m }
        adjustedSpike: { type: number, nullable: true, description: "Time-normalized; null in pre-market" }
        expectedSoFar: { type: number, description: "AvgVol3m * fractionElapsed (when market open), else 0 or AvgVol3m" }
        minutesSinceOpen: { type: integer }
        fractionElapsed: { type: number }
        marketState: { type: string, enum: [pre, open, post, closed] }
        source: { type: string, description: "finnhub or yahoo" }
